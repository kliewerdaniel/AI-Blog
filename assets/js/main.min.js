document.addEventListener("DOMContentLoaded",function(){const mobileMenuToggle=document.querySelector(".mobile-menu-toggle");const mainNav=document.querySelector(".main-nav");if(mobileMenuToggle&&mainNav){mobileMenuToggle.addEventListener("click",function(){mainNav.classList.toggle("active");this.classList.toggle("active");const expanded=mainNav.classList.contains("active");this.setAttribute("aria-expanded",expanded);mainNav.setAttribute("aria-hidden",!expanded)});mobileMenuToggle.setAttribute("aria-expanded","false");mobileMenuToggle.setAttribute("aria-label","Toggle navigation menu");mainNav.setAttribute("aria-hidden","true")}const postList=document.querySelector(".post-list");if(postList){postList.classList.add("styled-post-list");const postItems=postList.querySelectorAll("li");postItems.forEach(item=>{item.classList.add("post-item")})}const currentPath=window.location.pathname;const navLinks=document.querySelectorAll(".main-nav li a");navLinks.forEach(link=>{const linkPath=link.getAttribute("href");if(linkPath===currentPath||currentPath.includes("/blog/")&&linkPath==="/blog/"||currentPath.includes("/projects/")&&linkPath==="/projects/"||currentPath.includes("/guides/")&&linkPath==="/guides/"){link.parentElement.classList.add("active")}});const header=document.querySelector("header");let lastScrollTop=0;window.addEventListener("scroll",function(){const scrollTop=window.pageYOffset||document.documentElement.scrollTop;if(scrollTop>50){header.classList.add("scrolled")}else{header.classList.remove("scrolled")}lastScrollTop=scrollTop});document.querySelectorAll('a[href^="#"]').forEach(anchor=>{anchor.addEventListener("click",function(e){const targetId=this.getAttribute("href");if(targetId!=="#"){e.preventDefault();const targetElement=document.querySelector(targetId);if(targetElement){targetElement.scrollIntoView({behavior:"smooth",block:"start"});history.pushState(null,null,targetId)}}})});if("IntersectionObserver"in window){const lazyImages=document.querySelectorAll('img[loading="lazy"]');const imageObserver=new IntersectionObserver((entries,observer)=>{entries.forEach(entry=>{if(entry.isIntersecting){const img=entry.target;img.style.opacity="0";img.style.transition="opacity 0.5s ease";img.onload=()=>{img.style.opacity="1"};observer.unobserve(img)}})});lazyImages.forEach(img=>{img.style.opacity="0";imageObserver.observe(img)})}});